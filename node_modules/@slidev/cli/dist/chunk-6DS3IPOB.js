// node/syntax/transform/utils.ts
function normalizeRangeStr(rangeStr = "") {
  return !rangeStr.trim() ? [] : rangeStr.trim().split(/\|/g).map((i) => i.trim());
}
function getCodeBlocks(md) {
  const codeblocks = Array.from(md.matchAll(/^```[\s\S]*?^```/gm)).map((m) => {
    const start = m.index;
    const end = m.index + m[0].length;
    const startLine = md.slice(0, start).match(/\n/g)?.length || 0;
    const endLine = md.slice(0, end).match(/\n/g)?.length || 0;
    return [start, end, startLine, endLine];
  });
  return {
    codeblocks,
    isInsideCodeblocks(idx) {
      return codeblocks.some(([s, e]) => s <= idx && idx <= e);
    },
    isLineInsideCodeblocks(line) {
      return codeblocks.some(([, , s, e]) => s <= line && line <= e);
    }
  };
}
function escapeVueInCode(md) {
  return md.replace(/\{\{/g, "&lbrace;&lbrace;");
}

export {
  normalizeRangeStr,
  getCodeBlocks,
  escapeVueInCode
};
